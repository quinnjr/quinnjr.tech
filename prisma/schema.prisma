// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
  binaryTargets = ["native"]
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output = "../graphql"
  reExport = "Directories"
  // fields_Scalars_from = "graphql-scalars"
  // fields_Scalars_input = true
  // fields_Scalars_output = true
  fields_Validator_from = "class-validator"
  fields_Validator_input = true
  purgeOutput = true
}

model User {
  id String @id @default(uuid()) @db.Uuid
  email String @unique
  /// @HideField({ output: true, input: true })
  passwordHash String
  firstName String @unique
  middleName String?
  lastName String @unique
  website String?
  linkedin String? @unique
  github String? @unique
  profilePicture String?
  profile String
  profileHighlights String[]
  birthday DateTime
  skills String[]
  yubikeys String[]
  professionalMemberships String[]
  role Role @default(User)
  articles Article[]
  experiences Experience[]
  educations Education[]
  certifications Certification[]
  projects Project[]
  conferences Conference[]
  /// @HideField()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  @@map("users")
}

model Article {
  id String @id @default(uuid()) @db.Uuid
  title String @unique
  titleSlug String @unique
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.Uuid
  content String
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  @@map("articles")
}

enum Role {
  User
  Admin
}

model Experience {
  id String @id @default(uuid()) @db.Uuid
  employer String
  title String
  location String
  startYear Int
  endYear Int?
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  user User @relation(fields: [userId], references: [id])
  userId String @db.Uuid
  @@map("experiences")
}

model Education {
  id String @id @default(uuid()) @db.Uuid
  name String @unique
  location String
  degree String
  startYear DateTime?
  graduationYear Int? @unique
  activities String[]
  campusImage String
  url String
  user User @relation(fields: [userId], references: [id])
  userId String @db.Uuid
  @@map("eductation")
}

model Certification {
  id String @id @default(uuid()) @db.Uuid
  name String @unique
  certifier String
  user User @relation(fields: [userId], references: [id])
  userId String @db.Uuid
  @@map("certifications")
}

model Project {
  id String @id @default(uuid()) @db.Uuid
  name String @unique
  url String
  content String
  description String
  user User @relation(fields: [userId], references: [id])
  userId String @db.Uuid
  @@map("projects")
}

model Conference {
  id String @id @default(uuid()) @db.Uuid
  name String @unique
  startDate DateTime
  endDate DateTime
  user User @relation(fields: [userId], references: [id])
  userId String @db.Uuid
  @@map("conferences")
}
